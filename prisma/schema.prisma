// Prisma schema file
// Learn more at https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  TRADER
  ADMIN
}

enum ChallengeStatus {
  PENDING
  ACTIVE
  PASSED
  FAILED
}

enum MockedKycStatus {
  AUTO_APPROVED
}

enum MockedPaymentStatus {
  SUCCESS
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  passwordHash   String
  name           String?
  role           UserRole        @default(TRADER)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  challenges     UserChallenge[]
  mockedKyc      MockedKYC?
  mockedPayments MockedPayment[]
}

model ChallengePlan {
  id                 String          @id @default(cuid())
  name               String
  description        String?
  accountSize        Int
  profitTargetPct    Float
  maxLossPct         Float
  dailyLossPct       Float
  fee                Int
  durationDays       Int
  allowedInstruments String[]
  profitSplit        Float
  level              Int
  isActive           Boolean         @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  userChallenges     UserChallenge[]
}

model UserChallenge {
  id                     String             @id @default(cuid())
  userId                 String
  planId                 String
  status                 ChallengeStatus    @default(PENDING)
  demoAccountCredentials String?
  startDate              DateTime?
  endDate                DateTime?
  currentPnl             Float              @default(0)
  maxDrawdown            Float?
  violationCount         Int                @default(0)
  violationDetails       String?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  user                   User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan                   ChallengePlan      @relation(fields: [planId], references: [id], onDelete: Cascade)
  mockedPayments         MockedPayment[]
  metrics                ChallengeMetrics[]
}

model MockedKYC {
  id          String          @id @default(cuid())
  userId      String          @unique
  fullName    String
  phoneNumber String
  idNumber    String
  address     String
  status      MockedKycStatus @default(AUTO_APPROVED)
  approvedAt  DateTime        @default(now())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MockedPayment {
  id                String              @id @default(cuid())
  userId            String
  challengeId       String
  amount            Int
  status            MockedPaymentStatus @default(SUCCESS)
  mockTransactionId String
  paidAt            DateTime            @default(now())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge         UserChallenge       @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}

model ChallengeMetrics {
  id            String        @id @default(cuid())
  challengeId   String
  date          DateTime
  dailyPnl      Float
  cumulativePnl Float
  tradesCount   Int
  winRate       Float
  maxDrawdown   Float
  profitTarget  Float
  violations    Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  challenge     UserChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}
